<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AnubhavSaini</title>
    <description>This site belongs to Anubhav Saini. A polyglot programmer, who likes law, science, movies, technology, software...
</description>
    <link>http://iamanubhavsaini.github.io//</link>
    <atom:link href="http://iamanubhavsaini.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 27 Oct 2015 16:38:45 +0530</pubDate>
    <lastBuildDate>Tue, 27 Oct 2015 16:38:45 +0530</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>Suggestion 1 for Windows-Next.</title>
        <description>&lt;p&gt;So Windows installs itself in C drive. Users can put all sorts of crap in C drive. Well, I want to suggest windows that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Carve out a 20 GiB drive named C in hard-disk.  &lt;/li&gt;
  &lt;li&gt;Install Windows in C drive.  &lt;/li&gt;
  &lt;li&gt;Make C drive unaccessible to users.  &lt;/li&gt;
  &lt;li&gt;Every software installed other than Windows will go to a different drive.  &lt;/li&gt;
  &lt;li&gt;Every document, download, picture, configuration etc will go to different drive.  &lt;/li&gt;
  &lt;li&gt;Whatever you do, do not relinquish hold on C drive. Make it immutable for everything other than Windows update.   Make it invisible for users: developers and end-users alike.  &lt;/li&gt;
  &lt;li&gt;Put all the cache for Windows in C drive including page-files. Cache and page-files for other drives will live somewhere else.  &lt;/li&gt;
  &lt;li&gt;Put all the settings and configurations outside C drive.  &lt;/li&gt;
  &lt;li&gt;Make sure that you and user understand that OS drive exists only to provide users a platform.  &lt;/li&gt;
  &lt;li&gt;In a multi processor architecture, assign a processor permanently to windows. Do not let user-space see it. They will loose a processor but gain stability.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well by doing this, OS will become unhackable by exernal programs. Windows will not be able to crash because of user space viruses. Backup will be a breeze etc.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Oct 2015 16:27:27 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/2015/10/27/Windows-Next-Upgrade-Suggestion-1.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/2015/10/27/Windows-Next-Upgrade-Suggestion-1.html</guid>
        
        <category>blog</category>
        
        <category>post</category>
        
        <category>windows</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quote of the day.</title>
        <description>&lt;div class=&quot;QuoteContainer&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;
Freddy, as a younger man, I was a sculptor, a painter, and a musician. There was just one problem: I wasnâ€™t very good. As a matter of fact, I was dreadful. I finally came to the frustrating conclusion that I had taste and style, but not talent. I knew my limitations. &lt;span class=&quot;emphasis&quot;&gt;We all have our limitations&lt;/span&gt;, Freddy. Fortunately, I discovered that taste and style were commodities that &lt;span class=&quot;emphasis&quot;&gt;people desired&lt;/span&gt;. Freddy, what I am saying is: &lt;span class=&quot;emphasis&quot;&gt;know your limitations. You are a moron.&lt;/span&gt;
&lt;/div&gt;
&lt;div class=&quot;Quoter&quot;&gt;Lawrence Jamieson, Dirty Rotten Scoundrels (1988)&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 24 Oct 2015 23:55:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/quotes/2015/10/24/Quote-Of-The-Day.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/quotes/2015/10/24/Quote-Of-The-Day.html</guid>
        
        <category>daily</category>
        
        <category>quotes</category>
        
        <category>motivational</category>
        
        <category>QoD</category>
        
        <category>Movie-Quote</category>
        
        
        <category>daily</category>
        
        <category>quotes</category>
        
      </item>
    
      <item>
        <title>CSS-JS Example 1.</title>
        <description>&lt;div id=&quot;header&quot;&gt;
  &lt;div id=&quot;top&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;bottom&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;me&quot;&gt;&lt;div id=&quot;name&quot;&gt;Anubhav Saini&lt;/div&gt;&lt;/div&gt;
  &lt;div id=&quot;nav&quot;&gt;
    &lt;a href=&quot;/about&quot;&gt;about&lt;/a&gt;
    &lt;a href=&quot;/index.html&quot;&gt;home&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
  var changeStyleSheet = function (newLinkHref) {
    var links = document.getElementsByTagName(&#39;link&#39;);
    var oldLink = links[links.length-1];
    var newLink = document.createElement(&#39;link&#39;);
    newLink.setAttribute(&#39;type&#39;, &#39;text/css&#39;);
    newLink.setAttribute(&#39;rel&#39;, &#39;stylesheet&#39;);
    newLink.setAttribute(&#39;href&#39;, newLinkHref);
    document.getElementsByTagName(&#39;head&#39;)[0].replaceChild(newLink, oldLink);
  }
&lt;/script&gt;

&lt;hr /&gt;

&lt;div id=&quot;buttons&quot;&gt;
  &lt;input type=&quot;button&quot; onclick=&quot;changeStyleSheet(&amp;quot;/css/css-js-example-1-stylesheet-1.css&amp;quot;);&quot; value=&quot;style #1&quot; /&gt;
  &lt;input type=&quot;button&quot; onclick=&quot;changeStyleSheet(&amp;quot;/css/css-js-example-1-stylesheet-2.css&amp;quot;);&quot; value=&quot;style #2&quot; /&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 24 Oct 2015 16:22:44 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/the-example-project/2015/10/24/First-Example.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/the-example-project/2015/10/24/First-Example.html</guid>
        
        <category>daily</category>
        
        <category>css-js-example</category>
        
        <category>the-example-project</category>
        
        <category>css</category>
        
        <category>javascript</category>
        
        
        <category>daily</category>
        
        <category>the-example-project</category>
        
      </item>
    
      <item>
        <title>A Self-Replicating JavaScript Button.</title>
        <description>&lt;p&gt;A Self-Replicating JavaScript Button is the name of the challenge I am throwing to myself. This should be by far the easiest way to create self-replicating computer code.&lt;/p&gt;

&lt;p&gt;So a button looks like:&lt;/p&gt;

&lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;a button&quot; onclick=&quot;alert(&#39;I do nothing&#39;);&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you go to &lt;a href=&quot;https://github.com/IAmAnubhavSaini/a-self-replicating-button&quot;&gt;https://github.com/IAmAnubhavSaini/a-self-replicating-button&lt;/a&gt; then you can find the button with code around it.  &lt;/p&gt;

&lt;p&gt;Download it and click it. See what happens.&lt;/p&gt;

&lt;p&gt;You can test the same thing here though.  &lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
  var selfReplicate = function () {
    var button = document.createElement(&#39;input&#39;);
    button.type=&quot;button&quot;;
    button.value = &quot;a self replicating button&quot;;
    button.onclick = selfReplicate;
    document.getElementById(&#39;srbs&#39;).appendChild(button);
  }
&lt;/script&gt;

&lt;div id=&quot;srbs&quot;&gt;
  &lt;input type=&quot;button&quot; value=&quot;a self replicating button&quot; onclick=&quot;selfReplicate();&quot; /&gt;


&amp;nbsp;

---

&amp;nbsp;

A few new problems emerged though: How to test DOM? What good is Jasmine for?
&lt;/div&gt;
</description>
        <pubDate>Fri, 23 Oct 2015 23:55:56 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/javascript/2015/10/23/A-self-replicating-javascript-button.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/javascript/2015/10/23/A-self-replicating-javascript-button.html</guid>
        
        <category>programming</category>
        
        <category>JavaScript</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Quote of the day.</title>
        <description>&lt;div class=&quot;QuoteContainer&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;
When you decide to achieve something and vow for it solemnly, universe bends itself to let you have what you desire so restlessly.
&lt;/div&gt;
&lt;div class=&quot;Quoter&quot;&gt;Anubhav Saini&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 23 Oct 2015 23:24:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/quotes/2015/10/23/Quote-Of-The-Day.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/quotes/2015/10/23/Quote-Of-The-Day.html</guid>
        
        <category>daily</category>
        
        <category>quotes</category>
        
        <category>motivational</category>
        
        <category>QoD</category>
        
        
        <category>daily</category>
        
        <category>quotes</category>
        
      </item>
    
      <item>
        <title>Quote of the day.</title>
        <description>&lt;div class=&quot;QuoteContainer&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;
Make a decision today to not stay mediocre. Make a decision today to excel at something. Pour yourself into it. Forget everything else. See that what you decided to do manifested physically and that you succeeded.
&lt;/div&gt;
&lt;div class=&quot;Quoter&quot;&gt;Anubhav Saini&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 23:24:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/quotes/2015/10/22/Quote-Of-The-Day.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/quotes/2015/10/22/Quote-Of-The-Day.html</guid>
        
        <category>daily</category>
        
        <category>quotes</category>
        
        <category>motivational</category>
        
        <category>QoD</category>
        
        
        <category>daily</category>
        
        <category>quotes</category>
        
      </item>
    
      <item>
        <title>Being Agile.</title>
        <description>&lt;h2 id=&quot;all-about-being-agile&quot;&gt;All about Being Agile.&lt;/h2&gt;

&lt;h1 id=&quot;agile-practices&quot;&gt;Agile practices&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Acceptance Testing  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The customer writes acceptance tests. The tests demonstrate that the story is complete. The programmers and the customer automate acceptance tests. Programmers run the tests multiple times per day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Coding Standards  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The code needs to have a common style to facilitate communication between programmers. The team owns the code; the team owns the coding style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Collective Ownership  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The team owns the code. Programmer pairs modify any piece of code they need to. Extensive unit tests help protect the team from coding mistakes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Programmers integrate and test the software many times a day. Big code branches and merges are avoided.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Customer Team Member&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Teams have someone (or a group of people) representing the interests of the customer. They decide what is in the product and what is not in the product.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Metaphor or Vision&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The system metaphor provides an idea or a model for the system. It provides a context for naming things in the software, making the software communicate to the programmers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Open Workspace&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;To facilitate communications the team works in an open workspace with all the people and equipment easily accessible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Pair Programming&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Two programmers collaborate to solve one problem. Programming is not a spectator sport.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Planning Game&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;XP is an iterative development process. In the planning game, the customer and the programmers determine the scope of the next release. Programmers estimating the feature costs. Customers select features and package the development of those features into small iterations (typically 2 weeks). Iterations are combined into meaningful end user releases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Refactoring&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;As programmers add new features to the project, the design may start to get messy. If this continues, the design will deteriorate. Refactoring is the process of keeping the design clean incrementally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Simple Design&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The design in XP is kept as simple as possible for the current set of implemented stories. Programmers donâ€™t build frameworks and infrastructure for the features that might be coming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Small Releases&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Programmers build the system in small releases defined. An iteration is typically two weeks. A release is a group of iterations that provide valuable features to the users of the system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Sustainable Pace&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The team needs to stay fresh to effectively produce software. One way to make sure the team makes many mistakes is to have them work a lot of overtime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Test Driven Design&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Programmers write software in very small verifiable steps. First, we write a small test. Then we write enough code to satisfy the test. Then another test is written, and so on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;User Story&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;A User Story represents a feature of the system. The customer writes the story on a note card. Stories are small. The estimate to complete a story is limited to no greater than what one person could complete within a single iteration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Â &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Â   &lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.objectmentor.com&quot;&gt;OBJECT MENTOR&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Â &lt;/p&gt;

&lt;p&gt;[More will follow.]&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 12:33:33 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/agile/2015/10/22/Agile-Practices.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/agile/2015/10/22/Agile-Practices.html</guid>
        
        <category>programming</category>
        
        <category>agile</category>
        
        <category>software-development-methodology</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
        <category>agile</category>
        
      </item>
    
      <item>
        <title>Quote of the day.</title>
        <description>&lt;div class=&quot;QuoteContainer&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;
You had a choice, you have a choice, you will have a choice. So choose and get to make it work.
&lt;/div&gt;
&lt;div class=&quot;Quoter&quot;&gt;Anubhav Saini&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 21 Oct 2015 23:24:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/quotes/2015/10/21/Quote-Of-The-Day.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/quotes/2015/10/21/Quote-Of-The-Day.html</guid>
        
        <category>daily</category>
        
        <category>quotes</category>
        
        <category>motivational</category>
        
        <category>QoD</category>
        
        
        <category>daily</category>
        
        <category>quotes</category>
        
      </item>
    
      <item>
        <title>Quote of the day.</title>
        <description>&lt;div class=&quot;QuoteContainer&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;
You are and only you are responsible for your life.&lt;/div&gt;
&lt;div class=&quot;Quoter&quot;&gt;Anubhav Saini&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;you had a choice, you have a choice, you will have a choice;&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Oct 2015 23:24:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/quotes/2015/10/20/Quote-Of-The-Day.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/quotes/2015/10/20/Quote-Of-The-Day.html</guid>
        
        <category>daily</category>
        
        <category>quotes</category>
        
        <category>motivational</category>
        
        <category>QoD</category>
        
        
        <category>daily</category>
        
        <category>quotes</category>
        
      </item>
    
      <item>
        <title>Things I am already hating about rust.</title>
        <description>&lt;p&gt;I like a different programming languages because they can do different things and things differently. So, when I look at rust, it looks like same old C language with some C++ code thrown in it. I do not like this language based on itâ€™s looks. What it does is matter of gaining some knowledge in it, which will come later and with time.  &lt;/p&gt;

&lt;p&gt;So hereâ€™s the list of things I hate about &lt;code&gt;rust&lt;/code&gt;.  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use of &lt;code&gt;::&lt;/code&gt;.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use of &lt;code&gt;println&lt;/code&gt;.  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;if you are outputting something to standard output, please call it &lt;code&gt;stdout()&lt;/code&gt; instead of &lt;code&gt;println()&lt;/code&gt; or use &lt;code&gt;out(std, &quot;&quot;)&lt;/code&gt;. You might not be printing. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Use of main() as entry for program.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;What year is this? Let functions be functions and allow function writer to choose if the current function should be a entry point or not. Example follows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;fn first_function() {
	possible_entry(&quot;default&quot;, &quot;ff&quot;, &quot;first_function&quot;);
	out(std, &quot;Hello, World!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 19 Oct 2015 15:03:03 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/programming/rust/2015/10/19/Things-I-alread-dislike-about-rust.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/programming/rust/2015/10/19/Things-I-alread-dislike-about-rust.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>rust</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
        <category>programming</category>
        
        <category>rust</category>
        
      </item>
    
  </channel>
</rss>
