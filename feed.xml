<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AnubhavSaini</title>
    <description>This site belongs to Anubhav Saini. A polyglot programmer, who likes law, science, movies, technology, software...
</description>
    <link>http://iamanubhavsaini.github.io//</link>
    <atom:link href="http://iamanubhavsaini.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 14 Oct 2015 10:51:42 +0530</pubDate>
    <lastBuildDate>Wed, 14 Oct 2015 10:51:42 +0530</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Advice to Young Programmers and starters.</title>
        <description>&lt;h2 id=&quot;advice-to-people-who-are-in-despair&quot;&gt;Advice to people who are in despair.&lt;/h2&gt;

&lt;h1 id=&quot;keep-going&quot;&gt;Keep going.&lt;/h1&gt;

&lt;p&gt;I know it’s hard to go on. You cannot see a definite future and are always concerned with it; then you start to blame yourself and things around you. You start to self-doubt. Don’t.&lt;/p&gt;

&lt;p&gt;Whatever it is that you are doing, keep going.&lt;/p&gt;

&lt;h1 id=&quot;everything-is-possible-once-you-put-your-mind-to-it&quot;&gt;Everything is possible, once you put your mind to it.&lt;/h1&gt;

&lt;p&gt;Think only one thing. Do only one thing. There is nothing else for you in the world. You do not need holidays. You need to spend time with your craft. You need to be better. You need to evolve. Be one with the goal. Eat, drink, dream just one thing. Whatever your goal, move towards it, inch by inch. Keep going. Concentrate.&lt;/p&gt;

&lt;h1 id=&quot;you-got-it-tough&quot;&gt;You got it tough.&lt;/h1&gt;

&lt;p&gt;You think what you are doing is tough? Read about people who had it tougher than you. Nelson Mandela spent more years in jail than you have spent upon your craft, your work, your knowledge, your learning. There are people who do not have hands but they draw, paint and write - with their feet. There are people who do not have feet but still have climbed more mountains than you; ride better than you; program better than you; participate in marathons and have a life.&lt;/p&gt;

&lt;p&gt;There are people who didn’t have computers of today. What did Dennis Ritchie had when he created C and what did Linus had when he wrote Linux’s first version? What did Stallman had when he envisioned free software? You have i7, 8 GiB RAM, in your laptop and Quad-core, 3GiB RAM in your phone. You have it easy. They worked in MHz and in Kilo-Bytes. Your sense of entitlement and ego cannot fit into Kilo-Bytes these days.&lt;/p&gt;

&lt;p&gt;You want to be a writer, but do not have right tools? Don’t know where to start? Tell me this then, what tools Shakespear had, or Milton, or Ved Vyas or Panini or Khwarizmi or Kalidas?&lt;/p&gt;

&lt;p&gt;You want to be an artist? What tools did Michaelangelo had? Picasso, Nek Chand, Leonardo DaVinci didn’t have 3D printers or CAD software. They did. They spent thier life learning to do what they do better.&lt;/p&gt;

&lt;p&gt;You want to be a programmer? What did Bill Gates had when he started coding? Ada Lovelace - she didn’t even had a machine to code against. Linus didn’t have a GNU/Linux OS. Stallmand didn’t have a GNU Hurd. (Actually, he still doesn’t. so…)&lt;/p&gt;

&lt;p&gt;You have it easy. You are lazy. You think you are entitled to have better than what you have.&lt;/p&gt;

&lt;h2 id=&quot;advice-to-those-who-are-starting-to-program&quot;&gt;Advice to those who are starting to program.&lt;/h2&gt;

&lt;h1 id=&quot;think-first&quot;&gt;Think first.&lt;/h1&gt;

&lt;p&gt;Just because you have computer available to you and IDE too, doesn’t mean that you jump into the code. Think what you are going to do.&lt;/p&gt;

&lt;p&gt;Say you are going to create a linked list in C. Think what do you know about pointers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What do pointers point to?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Where do they point?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What about pointers in argument list; where is the storage then?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If two pointers point to same thing, what happens when one vanishes? What happens when one changes the memory storage?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Who makes pointers feasible?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In a linked list, do you want to store integers or strings or both?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How about storing a &lt;code&gt;void *&lt;/code&gt; object?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you have tests ready to check if you have implemented linked list correctly?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you use git or svn to incrementally lock your progress so that you can have a backup of code and know how you get where you are?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, think first. Get a pen and paper or better, glass and temp-marker; scribble away. Think what you are going to do.&lt;/p&gt;

&lt;h1 id=&quot;stick-to-it&quot;&gt;Stick to it.&lt;/h1&gt;

&lt;p&gt;Pick a programming language and stick to it. Write software in it. Multiple times. Multiple software. You can write a text editor, a code editor, a shell, a paint application etc.&lt;/p&gt;

&lt;p&gt;Do not pick the new-fancy language just because it’s new or fancy. Any Turing-Complete language can do everything what other T-C languages do.&lt;/p&gt;

&lt;p&gt;Stick to a language until you can speak it fluently. Stick to it until you can write code to solve same problems at least three different ways. Make use of stacks, lists and library available.&lt;/p&gt;

&lt;p&gt;Write language’s library yourself.&lt;/p&gt;

&lt;h1 id=&quot;write-tests-and-use-cases-before-you-code&quot;&gt;Write tests and use cases before you code.&lt;/h1&gt;

&lt;p&gt;Before you write code, write tests. Your code shold be able to handle every corner case one can throw at it.&lt;/p&gt;

&lt;h1 id=&quot;show-your-code-to-others-and-ask-for-feedback&quot;&gt;Show your code to others and ask for feedback.&lt;/h1&gt;

&lt;p&gt;You wrote your code, you learned one way to write code. Someone else saw your code, you learned what’s wrong with it.&lt;/p&gt;

&lt;h1 id=&quot;read-others-code&quot;&gt;Read other’s code.&lt;/h1&gt;

&lt;p&gt;You wrote your code, you learned one way to write code. You read other’s code, possibilities are endless.&lt;/p&gt;

&lt;h1 id=&quot;be-optimist-first-critical-later&quot;&gt;Be optimist first, critical later.&lt;/h1&gt;

&lt;p&gt;You do not know how you will solve a problem you’re facing. Self-doubt doesn’t help much, does it? Better is to believe that you will eventually find the solution and go at it. Keep fighting with your problem and approach to solutions until you see a right path. Walk on it.&lt;/p&gt;

&lt;p&gt;Now, be critical. Think:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Why couldn’t you do this before?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What made you take so long?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why this approach worked?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can there be more solutions for the same problem?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What will happen if I change this parameter here? or that one?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How long does it compute? How long does it take to produce result?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can it be improved?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;always-start-with-what-you-know&quot;&gt;Always start with what you know.&lt;/h1&gt;

&lt;p&gt;You and anyone else, do not know everything about anything. If you are strating chances are you do not know enough about anything. So when starting to solve problem, start with what you know. Then think what problem is asking. Relate your learnings with problem.&lt;/p&gt;

&lt;p&gt;Learn what you think will help you solve the problem. If it didn’t help, learn another thing. Repeat until solved.&lt;/p&gt;

&lt;h1 id=&quot;break-problem-in-smaller-problems&quot;&gt;Break problem in smaller problems.&lt;/h1&gt;

&lt;p&gt;Do not try to solve a given problem thinking that it should be solved at one place, in it’s entirety. Sometimes, it is much better to break problem in multitude of smaller problems. Solve the little ones and build upon them.&lt;/p&gt;

&lt;h1 id=&quot;solve-problems&quot;&gt;Solve problems.&lt;/h1&gt;

&lt;p&gt;Learning doesn’t mean anything, until you solve problem. Problems are what people pay to solve. Learning to solve problems yours first and then other’s will help you earn money too. Though, that’s a later part.&lt;/p&gt;

&lt;p&gt;Problem solving is a good skill. Life itself is a big bundle of small problems that come one after the another or together some unfortunate time. Solve each one by one. Learn to solve problems. Do it daily.&lt;/p&gt;

&lt;h1 id=&quot;learn-to-communicate&quot;&gt;Learn to communicate.&lt;/h1&gt;

&lt;p&gt;Learn English. Learn to write it well, speak it well. Do not throw English words together at someone. Learn to make sense of what you are going to say and say it. Communication is one thing that will differentiate you from the rest. Can you tell other person what problems you are facing. By doing just that, half your problems are solved.&lt;/p&gt;

&lt;p&gt;Can you understand what others are saying? Listen and you might make someone’s life easy. Learn to communicate better than you did yesterday.&lt;/p&gt;

&lt;h1 id=&quot;learn-english&quot;&gt;Learn English.&lt;/h1&gt;

&lt;p&gt;Given that you probably love your mothertongue if it’s not English, unfortunately English is the language of web and programming. Writing proper English can help you communicate better. Learn it, even if your parents don’t like it.&lt;/p&gt;

&lt;h1 id=&quot;learn-multiple-languages&quot;&gt;Learn multiple languages.&lt;/h1&gt;

&lt;p&gt;You should probably be better off if you know multiple languages, programmatic or otherwise.&lt;/p&gt;

&lt;h2 id=&quot;general-language-descriptions&quot;&gt;General Language-Descriptions&lt;/h2&gt;

&lt;h1 id=&quot;c&quot;&gt;C&lt;/h1&gt;

&lt;p&gt;For low-level programming; think os kernel level or driver level programming. Takes time to learn and very complex. Programs written in it may execute very fast. You can shoot your self in your foot if careless and loose a toe.&lt;/p&gt;

&lt;h1 id=&quot;c-1&quot;&gt;C++&lt;/h1&gt;

&lt;p&gt;For writing other languages, compilers, IDEs, tools etc. Very powerful. Supports procedural programming, Object oriented programming. Takes a lot of time to learn and very very complex.&lt;/p&gt;

&lt;p&gt;You can shoot yourself in both the feet, legs, thighs, both hands, upper body and head with one shot. You will survive the shot, but your soul might die after debugging for 3 days straight. (That’s just a joke, take it like that.)&lt;/p&gt;

&lt;p&gt;Expert level language.&lt;/p&gt;

&lt;h1 id=&quot;python&quot;&gt;Python&lt;/h1&gt;

&lt;p&gt;Every programmer should be fluent in python.&lt;/p&gt;

&lt;h1 id=&quot;lisp&quot;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;Growth harmone for programming brain.&lt;/p&gt;

&lt;h1 id=&quot;ruby&quot;&gt;Ruby&lt;/h1&gt;

&lt;p&gt;Teaches you to write code in simplest form. Clean and clear. Provides clarity to programming mind.&lt;/p&gt;

&lt;h1 id=&quot;javascript&quot;&gt;JavaScript&lt;/h1&gt;

&lt;p&gt;To code everything in between and including browsers and servers. Takes time to learn. Weird language (before &lt;code&gt;use strict;&lt;/code&gt; and ES6).&lt;/p&gt;

&lt;p&gt;Every programmer should konw JavaScript.&lt;/p&gt;

&lt;h1 id=&quot;htmlcss&quot;&gt;HTML/CSS&lt;/h1&gt;

&lt;p&gt;Every programmer should know these two.&lt;/p&gt;

&lt;h1 id=&quot;erlang&quot;&gt;Erlang&lt;/h1&gt;

&lt;p&gt;For those who don’t like procedures. Advanced.&lt;/p&gt;

&lt;h1 id=&quot;haskell--scala--f&quot;&gt;Haskell / Scala / F#&lt;/h1&gt;

&lt;p&gt;Functional. Powerful. Advanced.&lt;/p&gt;

&lt;p&gt;Well, I intend to add more to this post. So stay tuned. Let me know what you think.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Oct 2015 15:09:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/2015/10/14/Advice-To-Young-Programmers.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/2015/10/14/Advice-To-Young-Programmers.html</guid>
        
        <category>advice</category>
        
        <category>motivational</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quote of the day.</title>
        <description>&lt;div class=&quot;QuoteContainer&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;The biggest challenge you have is to challenge your own self-doubt and your laziness. It is your self-doubt and your laziness that define and limit who you are. If you want to change what you are you must take on your self-doubt and your laziness.
&lt;/div&gt;
&lt;div class=&quot;Quoter&quot;&gt;Robert Kiyosaki&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 14 Oct 2015 15:07:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/quotes/2015/10/14/Quote-Of-The-Day.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/quotes/2015/10/14/Quote-Of-The-Day.html</guid>
        
        <category>daily</category>
        
        <category>quotes</category>
        
        <category>motivational</category>
        
        
        <category>daily</category>
        
        <category>quotes</category>
        
      </item>
    
      <item>
        <title>Code Kata - 100 door/bulb problem.</title>
        <description>&lt;p&gt;As I was typing, &lt;code&gt;door&lt;/code&gt; doesn’t sound like &lt;code&gt;doar&lt;/code&gt;. Hmm weird English language.&lt;/p&gt;

&lt;p&gt;Anyway, The problem is very simple as described here.&lt;/p&gt;

&lt;p&gt;You are given a 100 (say) of doors or bulbs and you have to toggle them, iteratively. You will iterate through them 100 (usually) times and toggle their state. If closed/off, open/on them and vice versa.&lt;/p&gt;

&lt;p&gt;This is basicall a mathematical problem that can be solved without getting into mathematics behind it.&lt;/p&gt;

&lt;p&gt;In the end you will need to tell what is the state of the a given door or all of the doors or count of closed or open ones. (I dropped bulb from statement and we will concentrate on doors in this post moving on)&lt;/p&gt;

&lt;h2 id=&quot;official-problem-statementhttprosettacodeorgwiki100doors&quot;&gt;&lt;a href=&quot;http://rosettacode.org/wiki/100_doors&quot;&gt;Official problem statement&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Problem: You have 100 doors in a row that are all initially closed. You make 100 passes by the doors. The first time through, you visit every door and toggle the door (if the door is closed, you open it; if it is open, you close it). The second time you only visit every 2nd door (door #2, #4, #6, …). The third time, every 3rd door (door #3, #6, #9, …), -etc, until you only visit the 100th door.&lt;/p&gt;

&lt;p&gt;Question: What state are the doors in after the last pass? Which are open, which are closed?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;solution-statement&quot;&gt;Solution statement&lt;/h2&gt;

&lt;p&gt;As I said, this is a mathematical problem, but we will refrain from it initially. One easy way to solve is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for iteration = 1; iteration &amp;lt;= Doors.Count; iteration += 1
        for skip = iteration - 1, curr = skip; curr &amp;lt; Doors.Count; curr += skip
            Doors[curr] ^= 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;^&lt;/code&gt; indicates a XOR operation, so the whole line becomes a toggling function. What we do basically is that, for 100 iterations, we decide which door to start from and then based on the iteration number, we decide which doors to toggle.&lt;/p&gt;

&lt;p&gt;I have made a mistake in logic above. What will happen is that above logic will sit in a forever loop.&lt;/p&gt;

&lt;p&gt;Here’s the updated version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for iteration = 1; iteration &amp;lt;= Doors.Count; iteration += 1
        for skip = iteration, curr = skip-1; curr &amp;lt; Doors.Count; curr += skip
            Doors[curr] ^= 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s see the code in C# first.&lt;/p&gt;

&lt;h1 id=&quot;c&quot;&gt;C#&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    using System;

    public class Test
    {
        public static void Main()
        {
            bool[] Doors = new bool[100];
            for(int iteration = 1; iteration &amp;lt;= Doors.Length; iteration += 1){
                for(int skip = iteration, currDoor = skip-1; currDoor &amp;lt; Doors.Length; currDoor += skip){
                    Doors[currDoor] ^= true;
                }
            }
            int i = 0;
            foreach(var door in Doors){
                i++;
                Console.WriteLine(&quot;{0} - {1}&quot;, door ? &quot;Open&quot; : &quot;Closed&quot;, i);
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;ruby&quot;&gt;Ruby&lt;/h1&gt;

&lt;p&gt;I do not know ruby. Not even the hello world level. So, it’s live for me right now. I dare myself to code this problem in ruby.&lt;/p&gt;

&lt;p&gt;Meh, what I came up with wasn’t working, but here it is anyway.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Doors = Array[100]

    Doors.length.times { |x| Doors[x] = false }

    Doors.length.times { |i| 
        i-1.step(Doors.length, i) { |currDoor| Doors[currDoor] ^= true }
    }

    Doors.length.times { |i| puts Doors[i] == true ? &quot;Open&quot; : &quot;Closed&quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Problem is with step; it throws warning that it cannot be zero.&lt;/p&gt;

&lt;p&gt;You can head to rosettacode and find out ruby implementation.&lt;/p&gt;

&lt;p&gt;Anyway, problem has been solved, but not in TDD way; which I will do tomorrow.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 23:55:50 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/code-kata/2015/10/13/Code-Kata-100-door-bulb-problem.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/code-kata/2015/10/13/Code-Kata-100-door-bulb-problem.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>kata</category>
        
        <category>problem-solving</category>
        
        
        <category>daily</category>
        
        <category>code-kata</category>
        
      </item>
    
      <item>
        <title>First five octave graphs.</title>
        <description>&lt;h1 id=&quot;straight-line-y--x&quot;&gt;Straight line, y = x&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/1-y-eq-x.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;straight-line-y--2x-even-numbers&quot;&gt;Straight line, y = 2x, Even numbers&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/2-y-eq-2x.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;straight-line-y--2x--1-odd-numbers&quot;&gt;Straight line, y = 2x + 1, Odd numbers&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/3-y-eq-2xplus1.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;fibonacci-numbers-y--fibx&quot;&gt;Fibonacci numbers, y = fib(x)&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/4-fibonacci.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;prime-numbers-y--primex&quot;&gt;Prime numbers, y = prime(x)&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/5-prime-numbers.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;all-together&quot;&gt;All together&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/octave/6-all-together.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 16:51:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/programming/octave/2015/10/13/A-Few-Simple-Octave-Graphs-For-Beginners.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/programming/octave/2015/10/13/A-Few-Simple-Octave-Graphs-For-Beginners.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>octave</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
        <category>programming</category>
        
        <category>octave</category>
        
      </item>
    
      <item>
        <title>Quote of the day.</title>
        <description>&lt;div class=&quot;QuoteContainer&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;The greatest danger for most of us is not that our aim is too high and we miss it, but that it is too low and we reach it.
&lt;/div&gt;
&lt;div class=&quot;Quoter&quot;&gt;Michaelangelo&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 16:06:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/quotes/2015/10/13/Quote-Of-The-Day.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/quotes/2015/10/13/Quote-Of-The-Day.html</guid>
        
        <category>daily</category>
        
        <category>quotes</category>
        
        <category>motivational</category>
        
        
        <category>daily</category>
        
        <category>quotes</category>
        
      </item>
    
      <item>
        <title>Printing a linked list in reverse using recursion.</title>
        <description>&lt;pre&gt;&lt;code&gt;    void ReversePrint(Node *head)
    {
        if(head == NULL)
            return;
        ReversePrint(head-&amp;gt;next);
        printf(&quot;%d\n&quot;, head -&amp;gt; data);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;Node&lt;/code&gt; is &lt;code&gt;typedef struct Node Node;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    struct Node
    {
     int data;
     struct Node *next;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 05:48:36 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/programming/c/2015/10/13/How-To-Print-A-LinkedList-In-Reverse.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/programming/c/2015/10/13/How-To-Print-A-LinkedList-In-Reverse.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>c</category>
        
        <category>blog</category>
        
        <category>recursion</category>
        
        
        <category>blog</category>
        
        <category>programming</category>
        
        <category>c</category>
        
      </item>
    
      <item>
        <title>Passing pointers as argument doesn&#39;t mean pass by reference in C.</title>
        <description>&lt;h2 id=&quot;heres-the-code-where-though-we-do-pass-a-pointer-we-are-actually-not-passing-by-reference&quot;&gt;Here’s the code where though we do pass a pointer, we are actually not passing by reference.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    #include &amp;lt;stdio.h&amp;gt;

    struct node{
        int data;
        struct node * next;
    };

    void PrintCurrent(struct node * current){
        if(current != NULL){
            printf(&quot;%d\n&quot;, current -&amp;gt; data);
            current = current -&amp;gt; next;
        }
    }

    int main(void) {
        struct node * head = (struct node *)malloc(sizeof(struct node));
        head -&amp;gt; data = 10;
        head -&amp;gt; next = (struct node *)malloc(sizeof(struct node));
        head -&amp;gt; next -&amp;gt; data = 11;
        head -&amp;gt; next -&amp;gt; next = NULL;
        PrintCurrent(head);
        printf(&quot;%d\n&quot;, head -&amp;gt; data);
        PrintCurrent(head);
        printf(&quot;%d\n&quot;, head -&amp;gt; data);
        return 0;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those who understand this code, its trivial. But for a new comer it is mind bending.&lt;/p&gt;

&lt;p&gt;This example is exactly where students make mistake in concepts.&lt;/p&gt;

&lt;h2 id=&quot;concept&quot;&gt;Concept.&lt;/h2&gt;

&lt;p&gt;Pass by value occurs whenever you copy value of variable onto called function’s stack. Pass by reference occurs when you copy the address of the variable on the stack of the called function.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ideone.com/TJPAp4&quot;&gt;http://ideone.com/TJPAp4&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 05:02:23 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/programming/c/2015/10/13/Passing-By-Pointer-In-C-DoesNot-Mean-Pass-By-Reference.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/programming/c/2015/10/13/Passing-By-Pointer-In-C-DoesNot-Mean-Pass-By-Reference.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>c</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
        <category>programming</category>
        
        <category>c</category>
        
      </item>
    
      <item>
        <title>Feedback message for online course out there.</title>
        <description>&lt;p&gt;Following is the advice I gave.&lt;/p&gt;

&lt;p&gt;There should be more multiple choice questions; 20+ instead of just 5 questions.&lt;/p&gt;

&lt;p&gt;There should be more MCQ tests. 5+ instead of just one.&lt;/p&gt;

&lt;p&gt;There should be more assignments. 3+ instead of just one. Make it one easy, one medium and one hard.&lt;/p&gt;

&lt;p&gt;There should be more optional assignments. 5+ instead of just one.&lt;/p&gt;

&lt;p&gt;I know you guys are working hard as it is, but we learn by doing, not by listening or watching. Just food of thought.&lt;/p&gt;

&lt;p&gt;Then I thought I should make a post about it and make my point clearly.&lt;/p&gt;

&lt;p&gt;I found out that I learn by doing. Doing not the large problems or a huge task, but by doing small tasks that are inter-related. I learn what I do and when I get feedback quickly, I learn better. It’s like testing-development loop, where I learn by making incremental changes to my knowledge and by making incremental changes to my work and voila, I learn.&lt;/p&gt;

&lt;p&gt;Here’s one such loop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/How-I-learn.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you notice, there’s no stopping to learning. That’s by design.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2015 16:42:13 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/2015/10/12/Message-for-every-online-course.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/2015/10/12/Message-for-every-online-course.html</guid>
        
        <category>online-courses</category>
        
        <category>coursera</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Code Kata for the day - 12th Oct, 2015.</title>
        <description>&lt;p&gt;So, I did this exercise &lt;a href=&quot;http://iamanubhavsaini.github.io/daily/code-kata/2015/10/11/Code-Kata-1.html&quot;&gt;yesterday&lt;/a&gt;. Today I am going to do same exercise. But I am not going to sit idly-by. In subsequent kata, I will start to code.&lt;/p&gt;

&lt;p&gt;So this kata is about pricing items in a supermarket. Here we go:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to price items that have price fixed to it’s count, e.g price of a bottle of wine.&lt;/li&gt;
  &lt;li&gt;We need to price items that have price fixed to it’s quantity, e.g. price of 1 KG of potatoes.&lt;/li&gt;
  &lt;li&gt;We need to price items that have price fixed to it’s attributes, e.g. blue pair of jeans is costlier than white one.&lt;/li&gt;
  &lt;li&gt;We need to price items that can have discount based on quantity, e.g. 1 free for every 3.&lt;/li&gt;
  &lt;li&gt;We need to price items that can have discount based on date range, e.g. this week.&lt;/li&gt;
  &lt;li&gt;We need to price items that can have discount based on day of the week, e.g. super sale Wednesdays.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;I said in earlier post that I will create small programming problems. I am going to do that. This kata is anyway a shower kata, I’ll get to doing that when I am in shower.&lt;/p&gt;

&lt;p&gt;To solve this problem generally I’d need: types - &lt;code&gt;Item&lt;/code&gt;; services: &lt;code&gt;discountService&lt;/code&gt;, &lt;code&gt;priceService&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pretty much when store wants to calculate &lt;code&gt;price&lt;/code&gt;, it’ll call &lt;code&gt;priceService&lt;/code&gt;, and that in turn will call &lt;code&gt;discountService&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This much design looks simple and benign.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kata/2015-10-12-Kata-1-SuperMarketPricing-1.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kata/2015-10-12-Kata-1-SuperMarketPricing-2.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kata/2015-10-12-Kata-1-SuperMarketPricing-3.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have mentioned possible buy, what I mean is that customer might ask price and do not buy or buy afterwards, or just buy without asking for price or discount.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kata/2015-10-12-Kata-1-SuperMarketPricing-4.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, This kata will continue in my head for a forseeable future and I will continue creating a new post every day. You should probably checkout other posts or whatever.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2015 15:09:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/code-kata/2015/10/12/Code-Kata-1.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/code-kata/2015/10/12/Code-Kata-1.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>kata</category>
        
        <category>daily</category>
        
        
        <category>daily</category>
        
        <category>code-kata</category>
        
      </item>
    
      <item>
        <title>Code Kata for the day - 11th Oct, 2015.</title>
        <description>&lt;p&gt;I am going to start with &lt;code&gt;Supermarket Pricing&lt;/code&gt;. Problem is very simple: pricing goods at supermarkets.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Items can have price per unit. For example: INR 20 per packet of bread.&lt;/li&gt;
  &lt;li&gt;Items can have price per weight-unit. For example: INR 40 per kilogram of sugar.&lt;/li&gt;
  &lt;li&gt;Items can have price that is discounted.&lt;/li&gt;
  &lt;li&gt;Discounts may apply on certain items.&lt;/li&gt;
  &lt;li&gt;Discounts may apply on bill per certain rules.&lt;/li&gt;
  &lt;li&gt;People can pay with vouchers, IOUs etc.&lt;/li&gt;
  &lt;li&gt;People can get discount if they show up with advertisement.&lt;/li&gt;
  &lt;li&gt;People can get discount if they buy stuff in groups.&lt;/li&gt;
  &lt;li&gt;People can buy stuff in groups.&lt;/li&gt;
  &lt;li&gt;Items can have incremental or consumption based discount.&lt;/li&gt;
  &lt;li&gt;Items can have multiple selling prices depending upon the inventory.&lt;/li&gt;
  &lt;li&gt;People can return items.&lt;/li&gt;
  &lt;li&gt;People can return discounted items.&lt;/li&gt;
  &lt;li&gt;People may not have change on them.&lt;/li&gt;
  &lt;li&gt;People may want to pay with cash and cards.&lt;/li&gt;
  &lt;li&gt;Same type of item can cost different based on it’s attributes. For example: old and new clothes, food etc.&lt;/li&gt;
  &lt;li&gt;Store wants to keep track of the money it has in it’s cash registers.&lt;/li&gt;
  &lt;li&gt;Store wants to keep track of inventory currently in the store.&lt;/li&gt;
  &lt;li&gt;Store wants to replenish items as soon as they deplete from the shelves.&lt;/li&gt;
  &lt;li&gt;Store might levy return charges on items.&lt;/li&gt;
  &lt;li&gt;Store might allow to remove an item from purchase after it has been billed but before bill has been finalized and paid.&lt;/li&gt;
  &lt;li&gt;Store might want to discount items based on days.&lt;/li&gt;
  &lt;li&gt;Store might want to have discount-run based on dates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Items can have price per unit.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;We would need a type that tells what the item is.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We would need a price services that tells us what the current price of the item is.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We would need a discount service that price service calls to find discount on the item.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Items can have price per weight-unit.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;We would need to have items as item for store inventory keeping.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We would need to have items as identifier and associated features for customers.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Customer might want to know color, weight and other things.&lt;br /&gt;
 &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We would need to have items as identifier + associated features for price calculating service.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At this point I am thinking that I can literally convert this problem into my own code kata. I can practically carve out at least 5 small programming exercises out of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; 
 &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Items can have price that is discounted.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A discount service will keep track of discount.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Will update soon.&lt;/p&gt;

&lt;p&gt;Update: Nope didn’t have time.&lt;/p&gt;

&lt;p&gt;You might want to check &lt;a href=&quot;/daily/code-kata/2015/10/12/Code-Kata-1.html&quot;&gt;next day’s kata&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Oct 2015 14:21:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/code-kata/2015/10/11/Code-Kata-1.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/code-kata/2015/10/11/Code-Kata-1.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>kata</category>
        
        <category>daily</category>
        
        
        <category>daily</category>
        
        <category>code-kata</category>
        
      </item>
    
  </channel>
</rss>
