<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AnubhavSaini</title>
    <description>This site belongs to Anubhav Saini. A polyglot programmer, who likes law, science, movies, technology, software...
</description>
    <link>http://iamanubhavsaini.github.io//</link>
    <atom:link href="http://iamanubhavsaini.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 13 Oct 2015 19:21:23 +0530</pubDate>
    <lastBuildDate>Tue, 13 Oct 2015 19:21:23 +0530</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Code Kata - 100 door/bulb problem.</title>
        <description>&lt;p&gt;As I was typing, &lt;code&gt;door&lt;/code&gt; doesn’t sound like &lt;code&gt;doar&lt;/code&gt;. Hmm weird English language.&lt;/p&gt;

&lt;p&gt;Anyway, The problem is very simple as described here.&lt;/p&gt;

&lt;p&gt;You are given a 100 (say) of doors or bulbs and you have to toggle them, iteratively. You will iterate through them 100 (usually) times and toggle their state. If closed/off, open/on them and vice versa.&lt;/p&gt;

&lt;p&gt;This is basicall a mathematical problem that can be solved without getting into mathematics behind it.&lt;/p&gt;

&lt;p&gt;In the end you will need to tell what is the state of the a given door or all of the doors or count of closed or open ones. (I dropped bulb from statement and we will concentrate on doors in this post moving on)&lt;/p&gt;

&lt;h2 id=&quot;official-problem-statementhttprosettacodeorgwiki100doors&quot;&gt;&lt;a href=&quot;http://rosettacode.org/wiki/100_doors&quot;&gt;Official problem statement&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Problem: You have 100 doors in a row that are all initially closed. You make 100 passes by the doors. The first time through, you visit every door and toggle the door (if the door is closed, you open it; if it is open, you close it). The second time you only visit every 2nd door (door #2, #4, #6, …). The third time, every 3rd door (door #3, #6, #9, …), -etc, until you only visit the 100th door.&lt;/p&gt;

&lt;p&gt;Question: What state are the doors in after the last pass? Which are open, which are closed?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;solution-statement&quot;&gt;Solution statement&lt;/h2&gt;

&lt;p&gt;As I said, this is a mathematical problem, but we will refrain from it initially. One easy way to solve is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for iteration = 1; iteration &amp;lt;= Doors.Count; iteration += 1
        for skip = iteration - 1, curr = skip; curr &amp;lt; Doors.Count; curr += skip
            Doors[curr] ^= 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;^&lt;/code&gt; indicates a XOR operation, so the whole line becomes a toggling function. What we do basically is that, for 100 iterations, we decide which door to start from and then based on the iteration number, we decide which doors to toggle.&lt;/p&gt;

&lt;p&gt;I have made a mistake in logic above. What will happen is that above logic will sit in a forever loop.&lt;/p&gt;

&lt;p&gt;Here’s the updated version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for iteration = 1; iteration &amp;lt;= Doors.Count; iteration += 1
        for skip = iteration, curr = skip-1; curr &amp;lt; Doors.Count; curr += skip
            Doors[curr] ^= 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s see the code in C# first.&lt;/p&gt;

&lt;h1 id=&quot;c&quot;&gt;C#&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    using System;

    public class Test
    {
        public static void Main()
        {
            bool[] Doors = new bool[100];
            for(int iteration = 1; iteration &amp;lt;= Doors.Length; iteration += 1){
                for(int skip = iteration, currDoor = skip-1; currDoor &amp;lt; Doors.Length; currDoor += skip){
                    Doors[currDoor] ^= true;
                }
            }
            int i = 0;
            foreach(var door in Doors){
                i++;
                Console.WriteLine(&quot;{0} - {1}&quot;, door ? &quot;Open&quot; : &quot;Closed&quot;, i);
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;ruby&quot;&gt;Ruby&lt;/h1&gt;

&lt;p&gt;I do not know ruby. Not even the hello world level. So, it’s live for me right now. I dare myself to code this problem in ruby.&lt;/p&gt;

&lt;p&gt;Meh, what I came up with wasn’t working, but here it is anyway.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Doors = Array[100]

    Doors.length.times { |x| Doors[x] = false }

    Doors.length.times { |i| 
        i-1.step(Doors.length, i) { |currDoor| Doors[currDoor] ^= true }
    }

    Doors.length.times { |i| puts Doors[i] == true ? &quot;Open&quot; : &quot;Closed&quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Problem is with step; it throws warning that it cannot be zero.&lt;/p&gt;

&lt;p&gt;You can head to rosettacode and find out ruby implementation.&lt;/p&gt;

&lt;p&gt;Anyway, problem has been solved, but not in TDD way; which I will do tomorrow.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 23:55:50 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/code-kata/2015/10/13/Code-Kata-100-door-bulb-problem.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/code-kata/2015/10/13/Code-Kata-100-door-bulb-problem.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>kata</category>
        
        <category>problem-solving</category>
        
        
        <category>daily</category>
        
        <category>code-kata</category>
        
      </item>
    
      <item>
        <title>First five octave graphs.</title>
        <description>&lt;h1 id=&quot;straight-line-y--x&quot;&gt;Straight line, y = x&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/1-y-eq-x.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;straight-line-y--2x-even-numbers&quot;&gt;Straight line, y = 2x, Even numbers&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/2-y-eq-2x.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;straight-line-y--2x--1-odd-numbers&quot;&gt;Straight line, y = 2x + 1, Odd numbers&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/3-y-eq-2xplus1.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;fibonacci-numbers-y--fibx&quot;&gt;Fibonacci numbers, y = fib(x)&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/4-fibonacci.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;prime-numbers-y--primex&quot;&gt;Prime numbers, y = prime(x)&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/octave/5-prime-numbers.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;all-together&quot;&gt;All together&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/octave/6-all-together.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 16:51:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/programming/octave/2015/10/13/A-Few-Simple-Octave-Graphs-For-Beginners.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/programming/octave/2015/10/13/A-Few-Simple-Octave-Graphs-For-Beginners.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>octave</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
        <category>programming</category>
        
        <category>octave</category>
        
      </item>
    
      <item>
        <title>Quote of the day.</title>
        <description>&lt;div class=&quot;QuoteContainer&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;The greatest danger for most of us is not that our aim is too high and we miss it, but that it is too low and we reach it.
&lt;/div&gt;
&lt;div class=&quot;Quoter&quot;&gt;Michaelangelo&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 16:06:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/quotes/2015/10/13/Quote-Of-The-Day.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/quotes/2015/10/13/Quote-Of-The-Day.html</guid>
        
        <category>daily</category>
        
        <category>quotes</category>
        
        <category>motivational</category>
        
        
        <category>daily</category>
        
        <category>quotes</category>
        
      </item>
    
      <item>
        <title>Printing a linked list in reverse using recursion.</title>
        <description>&lt;pre&gt;&lt;code&gt;    void ReversePrint(Node *head)
    {
        if(head == NULL)
            return;
        ReversePrint(head-&amp;gt;next);
        printf(&quot;%d\n&quot;, head -&amp;gt; data);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;Node&lt;/code&gt; is &lt;code&gt;typedef struct Node Node;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    struct Node
    {
     int data;
     struct Node *next;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 05:48:36 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/programming/c/2015/10/13/How-To-Print-A-LinkedList-In-Reverse.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/programming/c/2015/10/13/How-To-Print-A-LinkedList-In-Reverse.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>c</category>
        
        <category>blog</category>
        
        <category>recursion</category>
        
        
        <category>blog</category>
        
        <category>programming</category>
        
        <category>c</category>
        
      </item>
    
      <item>
        <title>Passing pointers as argument doesn&#39;t mean pass by reference in C.</title>
        <description>&lt;h2 id=&quot;heres-the-code-where-though-we-do-pass-a-pointer-we-are-actually-not-passing-by-reference&quot;&gt;Here’s the code where though we do pass a pointer, we are actually not passing by reference.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    #include &amp;lt;stdio.h&amp;gt;

    struct node{
        int data;
        struct node * next;
    };

    void PrintCurrent(struct node * current){
        if(current != NULL){
            printf(&quot;%d\n&quot;, current -&amp;gt; data);
            current = current -&amp;gt; next;
        }
    }

    int main(void) {
        struct node * head = (struct node *)malloc(sizeof(struct node));
        head -&amp;gt; data = 10;
        head -&amp;gt; next = (struct node *)malloc(sizeof(struct node));
        head -&amp;gt; next -&amp;gt; data = 11;
        head -&amp;gt; next -&amp;gt; next = NULL;
        PrintCurrent(head);
        printf(&quot;%d\n&quot;, head -&amp;gt; data);
        PrintCurrent(head);
        printf(&quot;%d\n&quot;, head -&amp;gt; data);
        return 0;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those who understand this code, its trivial. But for a new comer it is mind bending.&lt;/p&gt;

&lt;p&gt;This example is exactly where students make mistake in concepts.&lt;/p&gt;

&lt;h2 id=&quot;concept&quot;&gt;Concept.&lt;/h2&gt;

&lt;p&gt;Pass by value occurs whenever you copy value of variable onto called function’s stack. Pass by reference occurs when you copy the address of the variable on the stack of the called function.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ideone.com/TJPAp4&quot;&gt;http://ideone.com/TJPAp4&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 05:02:23 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/programming/c/2015/10/13/Passing-By-Pointer-In-C-DoesNot-Mean-Pass-By-Reference.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/programming/c/2015/10/13/Passing-By-Pointer-In-C-DoesNot-Mean-Pass-By-Reference.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>c</category>
        
        <category>blog</category>
        
        
        <category>blog</category>
        
        <category>programming</category>
        
        <category>c</category>
        
      </item>
    
      <item>
        <title>Feedback message for online course out there.</title>
        <description>&lt;p&gt;Following is the advice I gave.&lt;/p&gt;

&lt;p&gt;There should be more multiple choice questions; 20+ instead of just 5 questions.&lt;/p&gt;

&lt;p&gt;There should be more MCQ tests. 5+ instead of just one.&lt;/p&gt;

&lt;p&gt;There should be more assignments. 3+ instead of just one. Make it one easy, one medium and one hard.&lt;/p&gt;

&lt;p&gt;There should be more optional assignments. 5+ instead of just one.&lt;/p&gt;

&lt;p&gt;I know you guys are working hard as it is, but we learn by doing, not by listening or watching. Just food of thought.&lt;/p&gt;

&lt;p&gt;Then I thought I should make a post about it and make my point clearly.&lt;/p&gt;

&lt;p&gt;I found out that I learn by doing. Doing not the large problems or a huge task, but by doing small tasks that are inter-related. I learn what I do and when I get feedback quickly, I learn better. It’s like testing-development loop, where I learn by making incremental changes to my knowledge and by making incremental changes to my work and voila, I learn.&lt;/p&gt;

&lt;p&gt;Here’s one such loop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/How-I-learn.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you notice, there’s no stopping to learning. That’s by design.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2015 16:42:13 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//blog/2015/10/12/Message-for-every-online-course.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//blog/2015/10/12/Message-for-every-online-course.html</guid>
        
        <category>online-courses</category>
        
        <category>coursera</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Code Kata for the day - 12th Oct, 2015.</title>
        <description>&lt;p&gt;So, I did this exercise &lt;a href=&quot;http://iamanubhavsaini.github.io/daily/code-kata/2015/10/11/Code-Kata-1.html&quot;&gt;yesterday&lt;/a&gt;. Today I am going to do same exercise. But I am not going to sit idly-by. In subsequent kata, I will start to code.&lt;/p&gt;

&lt;p&gt;So this kata is about pricing items in a supermarket. Here we go:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to price items that have price fixed to it’s count, e.g price of a bottle of wine.&lt;/li&gt;
  &lt;li&gt;We need to price items that have price fixed to it’s quantity, e.g. price of 1 KG of potatoes.&lt;/li&gt;
  &lt;li&gt;We need to price items that have price fixed to it’s attributes, e.g. blue pair of jeans is costlier than white one.&lt;/li&gt;
  &lt;li&gt;We need to price items that can have discount based on quantity, e.g. 1 free for every 3.&lt;/li&gt;
  &lt;li&gt;We need to price items that can have discount based on date range, e.g. this week.&lt;/li&gt;
  &lt;li&gt;We need to price items that can have discount based on day of the week, e.g. super sale Wednesdays.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;I said in earlier post that I will create small programming problems. I am going to do that. This kata is anyway a shower kata, I’ll get to doing that when I am in shower.&lt;/p&gt;

&lt;p&gt;To solve this problem generally I’d need: types - &lt;code&gt;Item&lt;/code&gt;; services: &lt;code&gt;discountService&lt;/code&gt;, &lt;code&gt;priceService&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pretty much when store wants to calculate &lt;code&gt;price&lt;/code&gt;, it’ll call &lt;code&gt;priceService&lt;/code&gt;, and that in turn will call &lt;code&gt;discountService&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This much design looks simple and benign.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kata/2015-10-12-Kata-1-SuperMarketPricing-1.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kata/2015-10-12-Kata-1-SuperMarketPricing-2.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kata/2015-10-12-Kata-1-SuperMarketPricing-3.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have mentioned possible buy, what I mean is that customer might ask price and do not buy or buy afterwards, or just buy without asking for price or discount.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kata/2015-10-12-Kata-1-SuperMarketPricing-4.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, This kata will continue in my head for a forseeable future and I will continue creating a new post every day. You should probably checkout other posts or whatever.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2015 15:09:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/code-kata/2015/10/12/Code-Kata-1.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/code-kata/2015/10/12/Code-Kata-1.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>kata</category>
        
        <category>daily</category>
        
        
        <category>daily</category>
        
        <category>code-kata</category>
        
      </item>
    
      <item>
        <title>Code Kata for the day - 11th Oct, 2015.</title>
        <description>&lt;p&gt;I am going to start with &lt;code&gt;Supermarket Pricing&lt;/code&gt;. Problem is very simple: pricing goods at supermarkets.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Items can have price per unit. For example: INR 20 per packet of bread.&lt;/li&gt;
  &lt;li&gt;Items can have price per weight-unit. For example: INR 40 per kilogram of sugar.&lt;/li&gt;
  &lt;li&gt;Items can have price that is discounted.&lt;/li&gt;
  &lt;li&gt;Discounts may apply on certain items.&lt;/li&gt;
  &lt;li&gt;Discounts may apply on bill per certain rules.&lt;/li&gt;
  &lt;li&gt;People can pay with vouchers, IOUs etc.&lt;/li&gt;
  &lt;li&gt;People can get discount if they show up with advertisement.&lt;/li&gt;
  &lt;li&gt;People can get discount if they buy stuff in groups.&lt;/li&gt;
  &lt;li&gt;People can buy stuff in groups.&lt;/li&gt;
  &lt;li&gt;Items can have incremental or consumption based discount.&lt;/li&gt;
  &lt;li&gt;Items can have multiple selling prices depending upon the inventory.&lt;/li&gt;
  &lt;li&gt;People can return items.&lt;/li&gt;
  &lt;li&gt;People can return discounted items.&lt;/li&gt;
  &lt;li&gt;People may not have change on them.&lt;/li&gt;
  &lt;li&gt;People may want to pay with cash and cards.&lt;/li&gt;
  &lt;li&gt;Same type of item can cost different based on it’s attributes. For example: old and new clothes, food etc.&lt;/li&gt;
  &lt;li&gt;Store wants to keep track of the money it has in it’s cash registers.&lt;/li&gt;
  &lt;li&gt;Store wants to keep track of inventory currently in the store.&lt;/li&gt;
  &lt;li&gt;Store wants to replenish items as soon as they deplete from the shelves.&lt;/li&gt;
  &lt;li&gt;Store might levy return charges on items.&lt;/li&gt;
  &lt;li&gt;Store might allow to remove an item from purchase after it has been billed but before bill has been finalized and paid.&lt;/li&gt;
  &lt;li&gt;Store might want to discount items based on days.&lt;/li&gt;
  &lt;li&gt;Store might want to have discount-run based on dates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Items can have price per unit.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;We would need a type that tells what the item is.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We would need a price services that tells us what the current price of the item is.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We would need a discount service that price service calls to find discount on the item.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Items can have price per weight-unit.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;We would need to have items as item for store inventory keeping.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We would need to have items as identifier and associated features for customers.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Customer might want to know color, weight and other things.&lt;br /&gt;
 &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We would need to have items as identifier + associated features for price calculating service.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At this point I am thinking that I can literally convert this problem into my own code kata. I can practically carve out at least 5 small programming exercises out of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; 
 &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Items can have price that is discounted.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A discount service will keep track of discount.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Will update soon.&lt;/p&gt;

&lt;p&gt;Update: Nope didn’t have time.&lt;/p&gt;

&lt;p&gt;You might want to check &lt;a href=&quot;/daily/code-kata/2015/10/12/Code-Kata-1.html&quot;&gt;next day’s kata&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Oct 2015 14:21:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/code-kata/2015/10/11/Code-Kata-1.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/code-kata/2015/10/11/Code-Kata-1.html</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        <category>kata</category>
        
        <category>daily</category>
        
        
        <category>daily</category>
        
        <category>code-kata</category>
        
      </item>
    
      <item>
        <title>Questions for the day - 11th Oct, 2015.</title>
        <description>&lt;h2 id=&quot;questions-are&quot;&gt;10 Questions are:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Why do humans crave for sugar?&lt;/li&gt;
  &lt;li&gt;What does sugar do to our innards?&lt;/li&gt;
  &lt;li&gt;Is sugar acidic or basic?&lt;/li&gt;
  &lt;li&gt;How much can wooden doors expand or shrink?&lt;/li&gt;
  &lt;li&gt;What natural wood is impervious to water and wood-destroying insects?&lt;/li&gt;
  &lt;li&gt;How much can our intestines expand?&lt;/li&gt;
  &lt;li&gt;What is pH level of our intestines?&lt;/li&gt;
  &lt;li&gt;What is pH?&lt;/li&gt;
  &lt;li&gt;Does pure water harms us?&lt;/li&gt;
  &lt;li&gt;How long can a person sustain without solid food? Only water and juices are allowed. Juices can be of anything, but have to have density and viscosity of water.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 11 Oct 2015 14:12:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//daily/questions/2015/10/11/Questions-1.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//daily/questions/2015/10/11/Questions-1.html</guid>
        
        <category>questions</category>
        
        <category>daily</category>
        
        
        <category>daily</category>
        
        <category>questions</category>
        
      </item>
    
      <item>
        <title>Lemon Programming.</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/lemon/TheBrilliantLemonFruit.png&quot; title=&quot;The brilliant lemon fruit.&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-you-want-to-program-like-a-lemon&quot;&gt;So you want to program like a lemon.&lt;/h2&gt;

&lt;p&gt;You first need to learn what lemon programming is about.&lt;/p&gt;

&lt;p&gt;Check out the list below.&lt;/p&gt;

&lt;h2 id=&quot;basic-constructs&quot;&gt;Basic Constructs&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You need to make sure that switch works. Really works.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  switch(number){  
  case 0:  
      if(number != 0){ abort(); }  
      else /* do something */  
  }  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You need to mix spaces with tabs.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  void main () {  
      int i = 0;  
      if( !i ){  
        /* do this */  
      }  
      else  
          /* do that */  
    return 0;  
  }  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You need to mix {} with (lack of {})&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  if( number == 0){
      number = 1;
  }
  else
      number = 0;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You need to save bytes where possible. So use &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; instead of &lt;code&gt;===&lt;/code&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  if( number = 0){
      number = 1;
  }
  else
      number = 0;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to implement cache first and when it hurts, refactor it.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If it still hurts, remove the cache implemented sofar and start from scratch.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to grow a pair of oo and tell yout team that you will test your code at run time. Who needs pesky test cases anyway: only lame programmers. Not you!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to refactor the code every other day. It doesn’t matter if it is already optimized. Make it better. Make it better.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lemon-programming-naming-conventions&quot;&gt;Lemon Programming Naming Conventions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use emotion revealing names&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If code is lucidly telling it’s function and reason of existence upon first reading then use ambiguous variable names.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Alpha-Numeric names.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To make variable names searchable use hungarian notation.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prefix names with class-name-identifier or short-class-name; which can be obtained by removing vowels most of the time.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Prefix Interfaces with I, Classes with K, Functions with F, Variables with V, Constants with C.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  interface IRobot {
      FTalk();
  }
  class KRobot : IRobot {
      const CID {public get; set;}
      void FTalk(){
          /* do something */
      }
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See how clear IRobot, KRobot, CID and FTalk are; one look and you know what each of them stands for.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keep variable names as short as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be creative with the names.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;want-to-work-at-a-lemon-software-that-is-oh-so-open-sourced-too&quot;&gt;Want to work at a lemon software that is oh so open sourced too?&lt;/h2&gt;

&lt;p&gt;Visit &lt;a href=&quot;https://github.com/iamanubhavsaini/lemon&quot;&gt;lemon - a browser that doesn’t browse&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Oct 2015 05:29:59 +0530</pubDate>
        <link>http://iamanubhavsaini.github.io//lemon/2015/10/11/Lemon-Programming.html</link>
        <guid isPermaLink="true">http://iamanubhavsaini.github.io//lemon/2015/10/11/Lemon-Programming.html</guid>
        
        <category>lemon</category>
        
        <category>programming</category>
        
        
        <category>lemon</category>
        
      </item>
    
  </channel>
</rss>
